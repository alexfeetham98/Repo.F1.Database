// <auto-generated />
using System;
using F1.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace F_.Database.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241119155614_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("F1.Database.Domain.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CarNumnber")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<int>("Engine")
                        .HasColumnType("int");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DriverID");

                    b.HasIndex("TeamID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("F1.Database.Domain.Personnel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Occupation")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("Personnel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Personnel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("F1.Database.Domain.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("TeamName")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("F1.Database.Domain.Driver", b =>
                {
                    b.HasBaseType("F1.Database.Domain.Personnel");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("F1.Database.Domain.Car", b =>
                {
                    b.HasOne("F1.Database.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1.Database.Domain.Team", null)
                        .WithMany("Cars")
                        .HasForeignKey("TeamID");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("F1.Database.Domain.Personnel", b =>
                {
                    b.HasOne("F1.Database.Domain.Team", null)
                        .WithMany("TeamPersonnel")
                        .HasForeignKey("TeamID");
                });

            modelBuilder.Entity("F1.Database.Domain.Team", b =>
                {
                    b.OwnsOne("F1.Database.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("TeamID")
                                .HasColumnType("int");

                            b1.Property<string>("Address1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Address2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BuildingName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TeamID");

                            b1.ToTable("Teams");

                            b1.WithOwner()
                                .HasForeignKey("TeamID");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("F1.Database.Domain.Team", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("TeamPersonnel");
                });
#pragma warning restore 612, 618
        }
    }
}
